# Text block testing.

meta:
  version: "1.0"

  txn_box:
  - when: post-load
    do:
    - debug: "Creating text blocks"
    - text-block-define:
        name: "SWOC"
        path: "static_file.txt"
        duration: hours<12>

    - text-block-define:
        name: "alternate"
        path: "static_file.txt"
        duration: seconds<20>

    - text-block-define:
        name: "missing"
        path: "missing.txt"
        text: "Concert missing."
        duration: seconds<20>

# -- Doc jwt open
    - text-block-define:
        name: "default-jwt"
        path: "/var/www/jwt/default-token.jwt"
        text: "N/A"
        duration: hours<12>
# -- Doc jwt close

# -- Doc 1 open
  - when: upstream-rsp
    do:
    - with: [ upstream-rsp-status , proxy-req-path ]
      select:
      - as-tuple:
        - eq: 404
        - match: "security.txt"
        do:
        - upstream-rsp-status: [ 200 , "OK" ]
        - proxy-rsp-body: "# Yoyodyne uses SmackerTwo for responsible disclosure.\n\
                           # To report abusive behavior please visit http://yoyodyne.exe\n\
                           Contact: mailto:security@yoyodyne.ex\n\
                          "
# -- Doc 1 close

  - when: proxy-req
    do:
    - with: proxy-req-path
      select:
      - match: "concert.txt"
        do:
        - proxy-req-field<Author-i-tay>:
          - proxy-req-field<Author-i-tay>
          - else: text-block<SWOC>

      - match: "alternate.txt"
        do:
        - proxy-req-field<Author-i-tay>: text-block<alternate>

      - match: "missing.txt"
        do:
        - proxy-req-field<Author-i-tay>: text-block<missing>

  txn-box-remap:
  - when: proxy-rsp
    do:
    - proxy-rsp-field<SWOC>: [ proxy-rsp-field<SWOC>, { else: text-block<SWOC> }]

# -- Doc jwt-apply open
  - when: proxy-rsp
    do:
    - with: proxy-req-field<Author-i-tay>
      select:
      - is-empty:
        do:
        - proxy-req-field<Author-i-tay>: text-block<default-jwt>
# -- Doc jwt-apply close

sessions:
- protocol: [ ipv4, tcp ]
  transactions:
  - all: { headers: { fields: [[ uuid, 1 ]]}}
    client-request:
      version: "1.1"
      scheme: "http"
      method: "GET"
      url: "/1"
      headers:
        fields:
        - [ Host, example.one ]
    proxy-request:
      version: "1.1"
      scheme: "http"
      method: "GET"
      url: "/1"
      headers:
        fields:
        - [ Host, example.one ]
    server-response:
      status: 200
      reason: OK
      content:
        size: 110
      headers:
        fields:
        - [ Content-Type, text/html ]
        - [ Content-Length, 110 ]
        - [ SWOC, "upstream" ]
    proxy-response:
      status: 200
      headers:
        fields:
        - [ SWOC, "upstream", equal ]

  - all: { headers: { fields: [[ uuid, 2 ]]}}
    client-request:
      version: "1.1"
      scheme: "http"
      method: "GET"
      url: "/2"
      headers:
        fields:
        - [ Host, example.one ]
    proxy-request:
      version: "1.1"
      scheme: "http"
      method: "GET"
      url: "/2"
      headers:
        fields:
        - [ Host, example.one ]
    server-response:
      status: 200
      reason: OK
      content:
        size: 120
      headers:
        fields:
        - [ Content-Type, text/html ]
        - [ Content-Length, 120 ]
    proxy-response:
      status: 200
      headers:
        fields:
        - [ SWOC, "Delain Concert.", equal ]

  - all: { headers: { fields: [[ uuid, 3 ]]}}
    client-request:
      version: "1.1"
      scheme: "http"
      method: "GET"
      url: "/security.txt"
      headers:
        fields:
        - [ Host, example.one ]
    proxy-request:
      version: "1.1"
      scheme: "http"
      method: "GET"
      url: "/security.txt"
      headers:
        fields:
        - [ Host, example.one ]
    server-response:
      status: 404
      reason: Not Found
      content:
        size: 130
      headers:
        fields:
        - [ Content-Type, text/html ]
        - [ Content-Length, 130 ]
    proxy-response:
      status: 200

- protocol: [ ipv4, tcp ]
  transactions:
  - all: { headers: { fields: [[ uuid, 4 ]]}}
    client-request:
      version: "1.1"
      scheme: "http"
      method: "GET"
      url: "/concert.txt"
      headers:
        fields:
        - [ Host, example.one ]
    proxy-request:
      version: "1.1"
      scheme: "http"
      method: "GET"
      url: "/concert.txt"
      headers:
        fields:
        - [ Author-i-tay, "Delain Concert.", equal ]
    server-response:
      status: 200
      content:
        size: 140
      headers:
        fields:
        - [ Content-Type, text/html ]
        - [ Content-Length, 140 ]
    proxy-response:
      status: 200

  - all: { headers: { fields: [[ uuid, 5 ]]}}
    client-request:
      version: "1.1"
      scheme: "http"
      method: "GET"
      url: "/concert.txt"
      headers:
        fields:
        - [ Host, example.one ]
        - [ Author-i-tay, "Nightwish Concert." ]
    proxy-request:
      headers:
        fields:
        - [ Author-i-tay, "Nightwish Concert.", equal ]
    server-response:
      status: 200
      content:
        size: 50
      headers:
        fields:
        - [ Content-Type, text/html ]
        - [ Content-Length, 50 ]
    proxy-response:
      status: 200

  - all: { headers: { fields: [[ uuid, 6 ]]}}
    client-request:
      version: "1.1"
      scheme: "http"
      method: "GET"
      url: "/alternate.txt"
      headers:
        fields:
        - [ Host, example.one ]
        - [ Author-i-tay, "Nightwish Concert." ]
    proxy-request:
      headers:
        fields:
        - [ Author-i-tay, "Delain Concert.", equal ]
    server-response:
      status: 200
      content:
        size: 50
      headers:
        fields:
        - [ Content-Type, text/html ]
        - [ Content-Length, 50 ]
    proxy-response:
      status: 200

  - all: { headers: { fields: [[ uuid, 7 ]]}}
    client-request:
      version: "1.1"
      scheme: "http"
      method: "GET"
      url: "/alternate.txt"
      headers:
        fields:
        - [ Host, example.one ]
    proxy-request:
      headers:
        fields:
        - [ Author-i-tay, "Delain Concert.", equal ]
    server-response:
      status: 200
      content:
        size: 50
      headers:
        fields:
        - [ Content-Type, text/html ]
        - [ Content-Length, 50 ]
    proxy-response:
      status: 200


  - all: { headers: { fields: [[ uuid, 8 ]]}}
    client-request:
      version: "1.1"
      scheme: "http"
      method: "GET"
      url: "/missing.txt"
      headers:
        fields:
        - [ Host, example.one ]
    proxy-request:
      headers:
        fields:
        - [ Author-i-tay, "Concert missing.", equal ]
    server-response:
      status: 200
      content:
        size: 50
      headers:
        fields:
        - [ Content-Type, text/html ]
        - [ Content-Length, 50 ]
    proxy-response:
      status: 200
