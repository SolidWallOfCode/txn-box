'''
Implement txn_box extensions for Traffic Server.
'''
# @file
#
# Copyright 2020, Verizon Media
# SPDX-License-Identifier: Apache-2.0
#

import os.path
import types
from urllib.parse import urlparse

def TxnBoxTest(self, replay_path, config_path=None, config_key="meta.txn_box", remap=None, regex_map=None):
    """
    Create a base test object specialized for TxnBox testing.

    Args:
        config_path: (str) Path to the global configuration file for txn_box.so. If omitted only
            remap configuration is done. If it's 'Auto' then the replay path is used.
        config_key: (str) The --key parameter to pass into txn_box.so in the
            plugin.config file.
        remap: [(from, to, [pparams])] Allows the specification of a
            set of remap config lines. If pparams is provided, then
            @plugin=txn_box.so is set and the set of pparams are placed in.
            if to is missing, it is set equal to from yielding an identity remap.
    """

    ts = self.MakeATSProcess("ts")
    self.Variables.TXNBOX_TS = ts
    self.Variables.TXNBOX_REPLAY_PATH = replay_path

    # Put the txn_box.so into the sandbox.
    plugin_dir = ts.Env['PROXY_CONFIG_PLUGIN_PLUGIN_DIR']
    from os.path import dirname
    git_root = dirname(dirname(dirname(ts.TestRoot)))
    txn_box_lib = os.path.join(git_root, "lib", "txn_box.so")
    ts.Setup.Copy(txn_box_lib, plugin_dir, CopyLogic.SoftFiles)

    # Configure txn_box in Traffic Server if there's a config. Otherwise assume it's remap only.
    if config_path == 'Auto':
        config_path = replay_path

    if config_path:
        txn_box_command = 'txn_box.so'

        if config_key:
            txn_box_command += ' --key {}'.format(config_key)

        ts.Setup.Copy(config_path, ts.Variables.CONFIGDIR)
        txn_box_command += ' {}'.format(os.path.basename(config_path))

        ts.Disk.plugin_config.AddLine(txn_box_command)

    # Configure Traffic Server to use the DNS process.
    self.Variables.TXNBOX_DNS = self.MakeDNServer("dns", ip='127.0.0.1', default=['127.0.0.1'])

    self.Variables.TXNBOX_SERVER = self.MakeVerifierServerProcess("pv-server", replay_path)

    ts.Disk.records_config.update({
        'proxy.config.dns.nameservers': '127.0.0.1:{0}'.format(self.Variables.TXNBOX_DNS.Variables.Port),
        'proxy.config.dns.resolv_conf': 'NULL',
        # The following is needed for ATS 9 and later.
        # 'proxy.config.plugin.dynamic_reload': 0
    })

    if remap:
        for remap_line in remap:
            pparams = None
            map_from = remap_line[0]
            if len(remap_line) == 1:
                map_to = map_from
            elif len(remap_line) == 2:
                if isinstance(remap_line[1], str):
                    map_to = remap_line[1]
                else:
                    map_to = map_from
                    pparams = remap_line[1]
            elif len(remap_line) == 3:
                map_to = remap_line[1]
                pparams = remap_line[2]
            else:
                raise ValueError("remap entries must be either (from, to) or (from, to, [pparams])")

            # Parse the replacement URL and change just the port.
            url = urlparse(map_to)
            url = url._replace(netloc='{}:{}'.format(url.hostname, self.Variables.TXNBOX_SERVER.Variables.http_port))
            line = 'map {} {} '.format(map_from, url.geturl())
            if pparams:
                line += '@plugin=txn_box.so '
                for pparam in pparams:
                    line += '@pparam={} '.format(pparam)
            ts.Disk.remap_config.AddLine(line)

    if regex_map:
        for rule in regex_map:
            pparams = None
            map_from = rule[0]
            if len(rule) == 2:
                if isinstance(rule[1], str):
                    map_to = rule[1]
                else:
                    pparams = rule[1]
            elif len(rule) == 3:
                map_to = rule[1]
                pparams = rule[2]
            else:
                raise ValueError("remap entries must be either "
                                 "(from, to) or (from, to, [pparams])")

            url = urlparse(map_to)
            url = url._replace(netloc='{}:{}'.format(url.hostname, self.Variables.TXNBOX_SERVER.Variables.http_port))
            line = 'regex_map {} {} '.format(map_from, url.geturl())
            if pparams:
                line += '@plugin=txn_box.so '
                for pparam in pparams:
                    line += '@pparam={} '.format(pparam)
            ts.Disk.remap_config.AddLine(line)

    # Always add this as a catch all at the end
    ts.Disk.remap_config.AddLine('map / http://127.0.0.1:{0}'.format(self.Variables.TXNBOX_SERVER.Variables.http_port))

    return self

def TxnBoxRun(self, text, replay_path=None, verifier_client_args="--verbose diag"):
    """
    Set up a standard test run for TxnBox

    Args:
        text: (str) Description for test run.
        replay_path: (str) Path to the replay file. Defaults to the path used for TxnBoxTest.
    Keywords
        replay_path: (str) The replay file.
    """

    if replay_path == None:
        replay_path = self.Variables.TXNBOX_REPLAY_PATH

    run = self.AddTestRun(text)
    ts = run.Variables.TS = self.Variables.TXNBOX_TS

    pv_client = run.AddVerifierClientProcess(
        "pv-client", ts, replay_path,
        http_ports=[ts.Variables.port],
        other_args=verifier_client_args)
    run.Variables.CLIENT = pv_client

    pv_server = self.Variables.TXNBOX_SERVER
    run.Variables.SERVER = pv_server

    pv_client.StartBefore(pv_server)
    run.Processes.Default.StartBefore(pv_server)
    run.Processes.Default.StartBefore(self.Variables.TXNBOX_DNS)
    run.Processes.Default.StartBefore(ts)
    run.Processes.Default.StartBefore(self.Variables.TXNBOX_DNS)

    return run

def TxnBoxTestAndRun(self, name, replay_path, config_path=None, config_key="meta.txn_box", remap=None
                     , verifier_client_args="--verbose diag"):
    self.TxnBoxTest(replay_path, config_path, config_key, remap)
    return self.TxnBoxRun(name, verifier_client_args=verifier_client_args)

ExtendTest(TxnBoxTest, name="TxnBoxTest")
ExtendTest(TxnBoxRun, name="TxnBoxRun")
ExtendTest(TxnBoxTestAndRun, name="TxnBoxTestAndRun")
